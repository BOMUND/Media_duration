#!/bin/bash

# Глобальные переменные
RECURSIVE=true
SORT="duration"
FILE_TYPES=("mp4" "avi" "mov" "mkv" "flv" "webm" "m4v" "3gp" "wmv" "mp3" "wav" "flac" "m4a" "ogg" "wma" "aac" "opus" "alac" "aiff" "mid" "amr" )
SHOW_FORMAT=false
TARGET_DIR="."
VERBOSE=false
DETAILED_OUTPUT=false
SORT_SPECIFIED=false

# Добавляем обработку сигналов для очистки временных файлов
cleanup() {
    rm -f "$temp_file" "$error_log" "$file_list" 2>/dev/null
}
trap cleanup EXIT

# Функция для отображения справки
show_help() {
    echo "Использование: mdur [ПАРАМЕТРЫ] [КАТАЛОГ]"
    echo "Анализирует длительность медиафайлов (видео/аудио) в указанном каталоге (по умолчанию - текущий)"
    echo ""
    echo "Параметры:"
    echo "  -h, --help      Показать эту справку"
    echo "  -r, --no-recur  Отключить рекурсивный поиск (только текущий каталог)"
    echo "  -s, --sort ТИП  Сортировка: n|name (по имени), d|duration (по длительности), f|format (по формату)"
    echo "  -t, --types СТР Указать типы файлов через запятую (например: mp4,mp3,avi)"
    echo "  -f, --format    Показывать формат файла в выводе"
    echo "  -v, --verbose   Подробный вывод (показывать прогресс)"
    echo ""
    echo "Примеры:"
    echo "  mdur                     # Анализ текущего каталога (только общая длительность)"
    echo "  mdur ~/videos            # Анализ указанного каталога (только общая длительность)"
    echo "  mdur -s n -f             # Сортировка по имени с форматом (детальный вывод)"
    echo "  mdur -t mp4,mov -v       # Только MP4/MOV с подробным выводом"
    exit 0
}

# Функция преобразования секунд в ЧЧ:ММ:СС (для отдельных файлов)
seconds_to_hms() {
    local seconds=$1
    local hours=$((seconds / 3600))
    local minutes=$(( (seconds % 3600) / 60 ))
    local secs=$((seconds % 60))
    printf "%02d:%02d:%02d" "$hours" "$minutes" "$secs"
}

# Функция преобразования секунд в расширенный формат (для общей длительности)
seconds_to_extended() {
    local total_seconds=$1
    local seconds=$((total_seconds % 60))
    local minutes=$(( (total_seconds / 60) % 60 ))
    local hours=$(( (total_seconds / 3600) % 24 ))
    local days=$(( (total_seconds / 86400) % 30 ))
    local months=$((total_seconds / 2592000))  # 30 дней в месяце
    local result=""
    # Добавляем месяцы, если есть
    if [ "$months" -gt 0 ]; then
        result="${months}m "
    fi
    # Добавляем дни, если есть или если есть месяцы
    if [ "$days" -gt 0 ] || [ "$months" -gt 0 ]; then
        result="${result}${days}d "
    fi
    # Добавляем часы, если есть или если есть дни/месяцы
    if [ "$hours" -gt 0 ] || [ "$days" -gt 0 ] || [ "$months" -gt 0 ]; then
        result="${result}${hours}h "
    fi
    # Добавляем минуты, если есть или если есть часы/дни/месяцы
    if [ "$minutes" -gt 0 ] || [ "$hours" -gt 0 ] || [ "$days" -gt 0 ] || [ "$months" -gt 0 ]; then
        result="${result}${minutes}m "
    fi
    # Всегда добавляем секунды
    result="${result}${seconds}s"
    echo "$result"
}

# Парсинг аргументов
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            show_help
            ;;
        -r|--no-recur)
            RECURSIVE=false
            shift
            ;;
        -s|--sort)
            if [[ ! "$2" =~ ^(n|name|d|duration|f|format)$ ]]; then
                echo "Ошибка: неверный тип сортировки '$2'" >&2
                echo "Допустимые значения: n|name, d|duration, f|format" >&2
                exit 1
            fi
            # Преобразование коротких параметров в полные
            case "$2" in
                n) SORT="name" ;;
                d) SORT="duration" ;;
                f) SORT="format" ;;
                *) SORT="$2" ;;
            esac
            SORT_SPECIFIED=true
            DETAILED_OUTPUT=true
            shift 2
            ;;
        -t|--types)
            if [[ -z "$2" ]]; then
                echo "Ошибка: не указаны типы файлов для параметра -t" >&2
                exit 1
            fi
            IFS=',' read -ra FILE_TYPES <<< "$2"
            shift 2
            ;;
        -f|--format)
            SHOW_FORMAT=true
            DETAILED_OUTPUT=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -*)
            echo "Ошибка: неизвестный параметр '$1'" >&2
            show_help
            ;;
        *)
            if [ -d "$1" ]; then
                TARGET_DIR="$1"
                shift
            else
                echo "Ошибка: '$1' не является каталогом" >&2
                exit 1
            fi
            ;;
    esac
done

# Получаем абсолютный путь к каталогу
if [ -d "$TARGET_DIR" ]; then
    TARGET_DIR=$(cd "$TARGET_DIR" && pwd)
else
    echo "Ошибка: каталог '$TARGET_DIR' не существует или недоступен" >&2
    exit 1
fi

# Проверка ffprobe
if ! command -v ffprobe &> /dev/null; then
    echo "Ошибка: ffprobe не установлен. Установите ffmpeg:" >&2
    echo "  Debian/Ubuntu: sudo apt install ffmpeg" >&2
    echo "  CentOS/RHEL/Fedora: sudo dnf install ffmpeg" >&2
    echo "  macOS (Homebrew): brew install ffmpeg" >&2
    echo "  Arch: sudo pacman -S ffmpeg" >&2
    echo "  Fedora: sudo dnf install ffmpeg" >&2
    exit 1
fi

# Подготовка аргументов для поиска
find_args=()
for ext in "${FILE_TYPES[@]}"; do
    find_args+=("-name" "*.${ext}" "-o")
done
# Удаляем последний "-o"
unset 'find_args[${#find_args[@]}-1]'

# Опции поиска
find_opts=()
[ "$RECURSIVE" = false ] && find_opts+=("-maxdepth" "1")

# Временные файлы
temp_file=$(mktemp)
error_log=$(mktemp)

# Счетчики
total_duration=0
file_count=0
errors=0

# Поиск и обработка файлов
if $VERBOSE; then
    echo "Поиск медиафайлов в '$TARGET_DIR'..."
    echo "Поддерживаемые форматы: ${FILE_TYPES[*]}"
    echo "Рекурсивный поиск: $RECURSIVE"
fi

# Сначала получаем список файлов
file_list=$(mktemp)
find "$TARGET_DIR" "${find_opts[@]}" \( "${find_args[@]}" \) -print0 2>/dev/null > "$file_list"

# Подсчитываем общее количество файлов для прогресса
total_files=$(tr '\0' '\n' < "$file_list" | wc -l)
if $VERBOSE; then
    echo "Найдено файлов: $total_files"
fi

# Обрабатываем файлы
current_count=0
while IFS= read -r -d $'\0' file; do
    ((current_count++))

    # Проверка прав доступа
    if [ ! -r "$file" ]; then
        echo "Ошибка: нет прав на чтение файла: $file" >> "$error_log"
        ((errors++))
        continue
    fi

    # Получение длительности
    duration=$(ffprobe -v quiet -show_entries format=duration -of default=nw=1:nk=1 "$file" 2>/dev/null)
    if [ -z "$duration" ]; then
        if $VERBOSE; then
            echo "Не удалось получить длительность: $file" >> "$error_log"
        fi
        ((errors++))
        continue
    fi

    # Проверка и преобразование длительности
    if ! [[ "$duration" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
        if $VERBOSE; then
            echo "Некорректная длительность '$duration': $file" >> "$error_log"
        fi
        ((errors++))
        continue
    fi

    # Округление до целых секунд с использованием awk
    seconds=$(awk "BEGIN {print int($duration + 0.5)}" 2>/dev/null)

    # Проверка, что seconds является корректным числом
    if ! [[ "$seconds" =~ ^[0-9]+$ ]] || [ "$seconds" -lt 0 ]; then
        if $VERBOSE; then
            echo "Некорректное значение секунд '$seconds': $file" >> "$error_log"
        fi
        ((errors++))
        continue
    fi

    # Проверка на нулевую длительность
    if [ "$seconds" -eq 0 ]; then
        echo "Предупреждение: файл с нулевой длительностью: $file" >> "$error_log"
        ((errors++))
        continue
    fi

    filename=$(basename "$file")
    extension="${filename##*.}"

    # Обновление счетчиков
    ((file_count++))
    total_duration=$((total_duration + seconds))

    # Для детального вывода сохраняем данные
    if $DETAILED_OUTPUT; then
        printf "%d\t%s\t%s\n" "$seconds" "$extension" "$filename" >> "$temp_file"
    fi

    # Показываем прогресс каждые 50 файлов
    if $VERBOSE && ((current_count % 50 == 0 || current_count == total_files)); then
        if [ "$total_files" -gt 0 ]; then
            percent=$((current_count * 100 / total_files))
            echo "  Обработано: $current_count/$total_files ($percent%)"
        else
            echo "  Обработано файлов: $current_count"
        fi
    fi
done < "$file_list"

# Очищаем временный файл списка
rm -f "$file_list"

# Проверка результатов
if ((file_count == 0)); then
    if ((errors > 0)); then
        echo "Ошибка: не удалось обработать ни одного файла (всего ошибок: $errors)" >&2
        if $VERBOSE; then
            echo "Подробности ошибок:" >&2
            head -20 "$error_log" >&2
            if [ "$(wc -l < "$error_log")" -gt 20 ]; then
                echo "... (показаны первые 20 ошибок, всего: $(wc -l < "$error_log"))" >&2
            fi
        fi
    else
        echo "Не найдено поддерживаемых медиафайлов в каталоге '$TARGET_DIR'"
    fi
    rm -f "$temp_file" "$error_log"
    exit 0
fi

# Краткий вывод (только общая информация)
if ! $DETAILED_OUTPUT; then
    echo "Общая длительность: $(seconds_to_extended "$total_duration")"
    echo "Файлов: $file_count"
    if ((errors > 0)); then
        echo "Файлов с ошибками: $errors"
        if $VERBOSE; then
            echo "Подробности ошибок:"
            head -10 "$error_log"
            if [ "$(wc -l < "$error_log")" -gt 10 ]; then
                echo "... (показаны первые 10 ошибок из $(wc -l < "$error_log"))"
            fi
        fi
    fi
    rm -f "$temp_file" "$error_log"
    exit 0
fi

# Детальный вывод
if $VERBOSE; then
    echo ""
    echo "Успешно обработано файлов: $file_count"
    if ((errors > 0)); then
        echo "Файлов с ошибками: $errors"
        echo "Подробности ошибок:"
        head -10 "$error_log"
        if [ "$(wc -l < "$error_log")" -gt 10 ]; then
            echo "... (показаны первые 10 ошибок из $(wc -l < "$error_log"))"
        fi
    fi
fi

# Сортировка результатов
case "$SORT" in
    name|n)
        sort_cmd="LC_ALL=C sort -t$'\t' -k3"
        sort_name="по имени"
        ;;
    duration|d)
        sort_cmd="LC_ALL=C sort -t$'\t' -k1nr"
        sort_name="по длительности"
        ;;
    format|f)
        sort_cmd="LC_ALL=C sort -t$'\t' -k2,2 -k1,1nr"
        sort_name="по формату"
        ;;
esac

# Форматирование вывода
echo ""
echo "Анализ медиафайлов в: $TARGET_DIR"
echo "Сортировка: $sort_name"
echo "Файлов: $file_count, Общая длительность: $(seconds_to_extended "$total_duration")"
echo ""

# Заголовки таблицы
if $SHOW_FORMAT; then
    printf "%-12s  %-6s  %s\n" "Длительность" "Формат" "Имя файла"
    echo "----------------------------------------"
else
    printf "%-12s  %s\n" "Длительность" "Имя файла"
    echo "----------------------------"
fi

# Вывод отсортированных результатов
eval "$sort_cmd" "$temp_file" | while IFS=$'\t' read -r seconds extension filename; do
    hms=$(seconds_to_hms "$seconds")
    if $SHOW_FORMAT; then
        printf "%-12s  %-6s  %s\n" "$hms" "$extension" "$filename"
    else
        printf "%-12s  %s\n" "$hms" "$filename"
    fi
done

# Удаление временных файлов
rm -f "$temp_file" "$error_log"

# Вывод итогов
if ((errors > 0)) && ! $VERBOSE; then
    echo ""
    echo "Внимание: не удалось обработать $errors файлов (см. подробный вывод с -v)"
fi

exit 0
